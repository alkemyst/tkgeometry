#summary A description of the different configuration files in _tkgeometry_ and _tkmaterial_

= Configuration Files in _tkgeometry_ and _tkmaterial_ =

When using the command line to run _tkgeometry_ or _tkmaterial_, the configuration files describing the geometry, the module settings and the involved materials of a specific tracker model are key. They allow the user to customise and fine-tune the model until it fits a given set of requirements, or to compare and contrast different options when modelling tracker properties.

The granularity of these options goes from fairly coarse to fairly fine. It is possible to change the number of barrels or endcaps, or the number of layers and discs per barrel and endcap. The size of a barrel or endcap, or the distance between barrels and endcaps can be modified. The number of strips or segments on a module can be adjusted by layer, by disc or by ring, as can its type. Finally, the list and the amount of materials needs to be specified by module type, by service or support structure category and by classifying it as a local or as a travelling component.

All of these options are bundled in the configuration files. The geometry configuration file describes the large-scale structure of the tracker. The settings file looks at layout variations for differents types of modules. And the material file assigns a mixture of physical components - and therefore weight - to the various available volume categories.

_All configuration files are case sensitive._ They support both C-style and shell-style comments starting with '//' and '#', respectively. As expected, everything after the comment sign is ignored until the end of the line is reached.

----

= The Geometry Configuration File =

Geometry configuration files are structured as a series of blocks. Each of these starts with one of a list of keywords indicating its function and, in some cases, a name tag. The block contents are enclosed in curly braces. All numeric values are in _mm_ unless specified explicitly.

_As a rule, layer or disc indices start at 1._

==_Tracker_ block==

The tracker block must be declared before all other components. There is exactly one such block in a geometry configuration file - no more, no less. Generally speaking, it looks something like this:

Tracker _trackername_ {
   zError = _value_;

   smallDelta = _value_;

   bigDelta = _value_;

   overlap = _value_;

   etaCut = _value_;

   ptCost = _value_;

   stripCost = _value_;

   ptPower = _value_;

   stripPower = _value_;
}

Whitespace is usually ignored, semicolons and curly braces are used as delimiters for parsing. The parameters describe the following properties:

*zError*: The range of z+ around the origin where a collision is most likely to occur. This value has an influence on how the modules in a layer or disc are laid out: specifically, with respect to overlap.

*smallDelta*: This describes the half the distance in Rho of two adjacent modules on the same rod. Namely, the _centre-to-centre_ distance of the two. Since this is a global default value for the entire tracker, it needs to be chosen in a way that prevents collisions between double-sided modules (which have another customisable distance between their two sensor surfaces). A re-declaration of this value in a _Barrel_ block for a specific layer will override the default for that layer. (Endcap solution pending...)

*bigDelta*: similar to _smallDelta_, this gives half the centre-to-centre distance of two rods in the same layer. The value in the _Tracker_ block is a global default that can be overridden by a re-declaration for a specific layer in one of the _Barrel_ blocks. (Endcap solution pending...)

*overlap*: The minimum overlap in z for two adjacent modules.

*etaCut*: The eta range that should be covered by the sensor surfaces. Modules created outside etaCut are discarded in the final layout.

*ptCost*: The estimated cost of a _sqare cm_ of pt module, in _CHF_.

*stripCost*: The estimated cost of a _sqare cm_ of rphi strip module, in _CHF_.

*ptPower*: The estimated power consumption _in mW_ for a single channel on a pt module.

*stripPower*: The estimaded power consumption _in mW_ for a single cannel on a rphi strip module.

==_Barrel_ block==

==_Endcap_ block==

==_Support_ block==

----

= The Settings File =

--BarrelType block

--EndcapType block

----

= The Material File =

--type keyword

--nStripsAcross keyword

--nSegments keyword

--L/E marker

--units

--M marker

--S marker

--D marker

--V/W/X/Y/Z markers (one each)